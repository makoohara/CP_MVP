from flask import Flask, request, jsonify
import openai

app = Flask(__name__)

# Define your OpenAI API key
OPENAI_API_KEY = "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"
openai.api_key = OPENAI_API_KEY

# Enable CORS
from flask_cors import CORS
CORS(app)

def recommend_song():
    try:
        # Logging the mood sent in the request body
        entry = request.json.get('mood')
        print(entry)

        # Building the OpenAI API prompt based on the request body
        prompt = f"Empathize this diary entry with a song: {entry} . Return the song title and artist only."

        # Adding genre information to the prompt if available
        genre = request.json.get('genre')
        if genre:
            prompt += f" Pick from the genre = '{genre}'"
        
        print(prompt)

        # Calling the OpenAI API to generate a song recommendation based on the prompt
        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=prompt,
            temperature=0.4,
            max_tokens=64,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            stop=["."]
        )

        # Building a new OpenAI API prompt based on the song recommendation
        song_title = response.choices[0].text.strip()
        prompt2 = f"What is the lyric part that resonates with {entry} in {song_title}? Respond only with the lyrics"
        print(prompt2)

        # Calling the OpenAI API to generate a response based on the new prompt
        response2 = openai.Completion.create(
            model="text-davinci-003",
            prompt=prompt2,
            temperature=0.4,
            max_tokens=64,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )

        # Logging the response generated by the second OpenAI API call
        response_text = response2.choices[0].text.strip()
        print(response_text)

        return jsonify({'response': response_text})
    
    except Exception as e:
        # Handling errors by sending an error response
        return jsonify({'error': str(e)}), 500


def create_prompt(entry):
    prompt1 = f"Here is a diary entry: {entry}. Imagine a response story to this diary entry that will give a new perspective to the writer, and describe it with three words: object or location, color, and emotion. Only return the three words"

    # Use the GPT API to create a prompt designated for DALL-E
    response1 = openai.Completion.create(
        engine="text-davinci-003",  # use GPT 3 engine
        prompt=prompt1,
        max_tokens=100  # Adjust the desired length of the generated text
    )

    res1 = response1.choices[0].text.strip()
    print('chatGPT prompt: ', res1)
    '''
    prompt2 = f"make a list of the most essential three words from this: {res1}"
    response2 = openai.Completion.create(
        engine="text-davinci-003",  # use GPT 3 engine
        prompt=prompt2,
        max_tokens=100  # Adjust the desired length of the generated text
    )
    res2 = response2.choices[0].text.strip()
    print('cleaned prompt: ', res2)
    '''
    return res1


def generate_image_url(prompt):
    try: 
        # Use the GPT API to create a prompt designated for DALL-E
        dalle_prompt = prompt + ' ,artistic'
        print('final dalle prompt:', dalle_prompt)
        response = openai.Image.create(
            prompt=(dalle_prompt),
            n=1,
            size="256x256",
        )

        img_url = response["data"][0]["url"]
        return jsonify({'img_url': img_url})
    except Exception as e:
        # Handling errors by sending an error response
        return jsonify({'error': str(e)}), 500


@app.route('/')
def home():
    return 'Server running on port 3000'

@app.route('/execute', methods=['POST'])
def run_app():
    recommend_song()
    generate_image_url(create_prompt(diary_entry))

if __name__ == '__main__':
    app.run(port=3000)
